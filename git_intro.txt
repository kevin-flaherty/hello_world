[Notes from 'Git with Geir' June 26, 2015. Updated June 8, 2017]

Git enables:
	- local, versioned backups
	- remote, versioned backups
	- collaborations

Git process:
	On a local workstation: Modify files in a working directory, which are then staged, and then committed to the local repository. Each snapshot is assigned a unique hexadecimal; these unique ids are useful when multiple collaborators are working on the same project. Local modifications can be pushed or cloned/pulled/fetched/merged to/from a remote repository (e.g. github)

'git init'	: initialize a folder with git. Creates a '.git' folder that holds everything (data/backups; you don’t touch this)

'git status'	: relates status of project. Will list any untracked files, as well as any staged files that have not been committed. 

'git add [file]': move a file from untracked to staged

'git add .'	: add all files from the current directory

'git commit'	: initially opens text editor so a comment can be added. Uses the default text editor, which can be vim (use ':q!' to exit vim, use ':wq' to save the commit message)

‘git commit -m "[message]" ’    :save snapshot to local repository, and add a message at the same time (rather than opening vi to edit the message)

'git reset HEAD [file]': unstages a change, but does not change the local version of the file. 

'git checkout -- [file]': completely revert a change (e.g. you accidentally deleted a file and want to 'checkout' the file from a previous version). This overwrites any local changes on the file since the last commit. 

'git log'	:show the log of changes

'git diff 2922 18e6'	:compare stages whose checksum that start with 2922, and 18e6

'git diff HEAD~1 HEAD'	:compare previous stage (HEAD~1) with current stage (HEAD)

'git commit --amend'	:opens up emacs to allow modification of previous commit message

'git revert -n [checksum]': undoes the change specified by the commit [checksum]. This makes the changes in the staging area, which then can be committed. 

'.gitignore'	: file containing list of files not to commit [things to ignore: (1) private info, (2) junk files, (3) generated files (e.g. pdf), (4) binary files (maybe, e.g. .doc), (5) large files]

'git remote add origin [url]':  link a repository on a local machine onto github
'git push origin master':	push changes onto remote repository
'git push'		: after first long 'git push' command, this shortcut can be used

'git clone [url]'	: downloads the repository from github and puts it into a project directory with the same name as the online repository (you can give it a directory name after the url)

'git pull'		: pulls any changes 

'git fetch'		: pulled down the change, but didn't do anything with it yet

'git merge'		: merged the changes on the local machine with the fetch changes (will work as along as you and your collaborator have not changed the the same line in the same file)

'Forking a repository' - Allow someone to download the repository and work on it without full collaborator access (they can't automatically push the changes to the online repository)

